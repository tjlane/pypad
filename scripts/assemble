#!/usr/bin/env python

# THIS FILE IS PART OF PyPad, AND IS GOVERENED BY A PERMISSIBILITY LICENSE 
# GOVERNING ITS USE AND DISTRIBUTION. YOU SHOULD HAVE RECIEVED A COPY OF THIS
# LICENSE WITH THE SOFTWARE; IF NOT PROVIDED, WRITE TO <tjlane@stanford.edu>.
#
# AUTHORS:
# TJ Lane <tjlane@stanford.edu>
# Jonas Sellberg <jonas.a.sellberg@gmail.com>
#
# Apr 30, 2013

"""
A simple script that takes a CSPad specification and a raw image and renders
an assembled image.
"""

import argparse

from pypad import cspad
from pypad import utils
from pypad import read

import matplotlib.pyplot as plt
import matplotlib.patches as plt_patches
from pypad.plot import imshow_cspad

parser = argparse.ArgumentParser(description='''Use a CSPAD geometry to assemble a raw image.''')
                                 
parser.add_argument('image_file', help='The (raw) image file.')
parser.add_argument('-c', '--center', action="store_true", default=False, 
                    help='''Plot the center where the forward beam intersects
                            the detector plane.''') 
parser.add_argument('-m', '--metrology', default=None, 
                    help='''A CSPAD Metrology. Either a flat text file of an 
                            optical metrology (see documentation) or a saved 
                            pypad.CSPad object. If not passed uses a default
                            metrology.''')
parser.add_argument('-s', '--shot', default=0, type=int,
                    help='''Which shot to display (for files with many shots). Default: 0''')
                            
args = parser.parse_args()

raw_image = read.load_raw_image(args.image_file, args.shot)

if args.metrology:
    cs1 = cspad.CSPad.load(args.metrology)
    fn = args.metrology
else:
    cs1 = cspad.CSPad.default()
    fn = 'DEFAULT'
    
print ""
print "Assembling image on: %s" % fn
print "Note that assembled image is accurate to only one pixel and is a "
print "projection into the x/y plane"
print ""
    

fig = plt.figure()
ax = plt.subplot(111)

# plot assembled image
imshow_cspad( cs1(raw_image), ax=ax, scrollable=True )

if args.center:
    # plot beam center
    beam_center = plt_patches.Circle((1000,1000), 2, fill=True, lw=1, color='r')
    ax.add_patch(beam_center)

plt.show()
