#!/usr/bin/env python

# THIS FILE IS PART OF PyPad, AND IS GOVERENED BY A PERMISSIBILITY LICENSE 
# GOVERNING ITS USE AND DISTRIBUTION. YOU SHOULD HAVE RECIEVED A COPY OF THIS
# LICENSE WITH THE SOFTWARE; IF NOT PROVIDED, WRITE TO <tjlane@stanford.edu>.
#
# AUTHORS:
# TJ Lane <tjlane@stanford.edu>
# Jonas Sellberg <jonas.a.sellberg@gmail.com>
#
# Apr 30, 2013

"""
This is an interactive platform for getting initial parameters for a geometry
optimization.
"""

import sys
import argparse
import yaml
from pprint import pprint

from pypad import cspad
from pypad.utils import preprocess_image
from pypad.plot import ManipTwoPanelCSPAD, ToggleButton
from pypad.read import load_raw_image

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as plt_patches
from matplotlib.widgets import Slider, Button


def parse_n_load():
    """
    Parse the command line arguments and make sense of them. Return an image.
    """
    
    # parse arguments
    parser = argparse.ArgumentParser(description='Generate filter parameters')
    parser.add_argument('image_file', help='The (raw) image file of the calibration standard')
    parser.add_argument('-m', '--metrology', default=None, 
                        help='''A CSPAD Metrology. Either a flat text file of an 
                                optical metrology (see documentation) or a saved 
                                pypad.CSPad object. If not passed uses a default
                                metrology.''')
    parser.add_argument('-t', '--type', help='''The metrology type.''', 
                        default='cxi', choices=['cxi', 'xpp'])
    parser.add_argument('-o', '--output', default='filter_params.yaml',
                        help='Write the output filter parameters to file after you\'re done (default: filter_params.yaml)')
    args = parser.parse_args()
    
    raw_image = load_raw_image(args.image_file)
    
    # if we got a parameter dir, assemble the image
    if args.metrology:
        cs1 = cspad.CSPad.load(args.metrology, mettype=args.type)
    else:
        cs1 = cspad.CSPad.default()
        
    return raw_image, cs1, args.output
    
    
def print_instructions():
    """
    Prints some instructions...
    """
    
    print ""
    print "      ---  INTERACTIVE PARAMETER OPTIMIZATION ENVIRONMENT  ---    "
    print ""
    print " Welcome to autogeom's interactive image pre-processing environment."
    print " Adjust the sliders to optimize your image -- the goal is to get one"
    print " or more sharp powder rings on the image to show up above the noise."
    print ""
    print " Instructions"
    print " ------------"
    print " -- Dilate:       Sets the size of the center hole for the forward"
    print "                  beam of the CSPAD."
    print " -- Threshold:    Sets a binary intensity threshold. The scale next"
    print "                  to the bar is on a logarithmic scale."
    print " -- Rank 1:       A median filter. You can think of this as a voting"
    print "                  scheme, where a pixel gets set to be the same as a"
    print "                  consensus of those around it. This parameter sets"
    print "                  the size of that consensus window."
    print " -- Minimum:      A minimum filter. If any pixel in this window size"
    print "                  is zero, all pixels in the window become zero."
    print " -- Gaussian:     A Gaussian filter, where each pixel is convoluted"
    print "                  by a Gaussian function. The parameter sets the"
    print "                  standard deviation of this Gaussian function."
    print " -- Right Click: (Left Panel)  Sets the guess of the center of the "
    print "                               image."
    print "                 (Right Panel) Set a 'peak limit', the algorithm"
    print "                               only optimizes peaks between these "
    print "                               limits. You can set many such regions."
    print ""
    print " Once you are done, close the figure and the final parameters you have"
    print " in your window will be written to disk in a file that can be interpreted"
    print " by the 'optgeom' script, which will give you a final, optimized geometry."
    print ""
    print " PS. The rendering can be a bit slow... Please be patient!\n"
    
    return

    
class InteractiveFilter(ManipTwoPanelCSPAD):
    """
    Build an interactive environment for determining good parameters for
    the geometry optimization.
    """
    
    def __init__(self, image, cspad):
        
        self.raw_unfiltered_image = image.copy()
        
        # initial values
        self.sobel_filter = False
        self.regions      = []
        self.filter_on    = False
        
        # initialize the plot
        super(InteractiveFilter, self).__init__(image, cspad)
        plt.subplots_adjust(bottom=0.45)
        
        # display the image with sliders for each parameter
        ax_thsd = plt.axes([0.20, 0.15, 0.60, 0.03], axisbg=self.axcolor)
        ax_sigm = plt.axes([0.20, 0.20, 0.60, 0.03], axisbg=self.axcolor)
        ax_minf = plt.axes([0.20, 0.25, 0.60, 0.03], axisbg=self.axcolor)
        ax_rank = plt.axes([0.20, 0.30, 0.60, 0.03], axisbg=self.axcolor)
        
        self.threshold_slider = Slider(ax_thsd, 'Threshold', -5.0, 0.0, valinit=-2.0) # log10 scale
        self.sigma_slider     = Slider(ax_sigm, 'Gaussian Filter', 0.0, 5.0, valinit=1.0)
        self.minf_slider      = Slider(ax_minf, 'Minimum Filter', 1, 25, valinit=3)
        self.rank_slider      = Slider(ax_rank, 'Rank 1 Filter', 1, 25, valinit=8)
        
        ax_reset = plt.axes([0.8, 0.02, 0.1, 0.04])
        self.reset_button = Button(ax_reset, 'Reset', color=self.axcolor, hovercolor='0.975')

        ax_sobel = plt.axes([0.69, 0.02, 0.1, 0.04])
        self.filter_button = ToggleButton(ax_sobel, 'Apply Filter', color=self.axcolor, hovercolor='0.975')
        
        ax_sobel = plt.axes([0.58, 0.02, 0.1, 0.04])
        self.sobel_button = ToggleButton(ax_sobel, 'Sobel Filter', color=self.axcolor, hovercolor='0.975')
        
        # link mouse actions to functions
        self.threshold_slider.on_changed(self.update_image)
        self.sigma_slider.on_changed(self.update_image)
        self.minf_slider.on_changed(self.update_image)
        self.rank_slider.on_changed(self.update_image)
        
        self.reset_button.on_clicked(self.reset)
        
        self.filter_button.on_turned_on(self._filter_on)
        self.filter_button.on_turned_off(self._filter_off)
        
        self.sobel_button.on_turned_on(self._sobel_on)
        self.sobel_button.on_turned_on(self.update_image)
        self.sobel_button.on_turned_off(self._sobel_off)
        self.sobel_button.on_turned_off(self.update_image)
                
        # actually show the image!
        self.update_image()
        
        return
    
    
    def update_image(self, val=None):
        """
        If a slider gets moved, update the panels
        """
        
        # apply our filters
        if not self.filter_on:
            self.image = self.raw_unfiltered_image
        else:        
            thd = np.power( 10, self.threshold_slider.val )
            sig = self.sigma_slider.val
            mnf = int( self.minf_slider.val )
            rnk = int( self.rank_slider.val )
            self.image = preprocess_image(self.raw_unfiltered_image, 
                                          threshold=thd, 
                                          sigma=sig, minf_size=mnf, 
                                          rank_size=rnk,
                                          sobel=self.sobel_filter)
        
        super(InteractiveFilter, self).update_image(val)
        
        return
        
    
    def on_click(self, event):
        """
        If the user clicks on the image
        """
        if event.inaxes and (event.button is not 1):

            if event.inaxes == self.axL:
                super(InteractiveFilter, self).on_click(event)
                
            # clicks on right panel -- set opt limits
            elif event.inaxes == self.axR:
                v_line = event.xdata
                print "Set peak limit at: %f" % v_line
                self.regions.append(v_line)
                self.update_image(event)
                    
        return
        
        
    def draw_projection(self, image):
        
        super(InteractiveFilter, self).draw_projection(image)
        if len(self.regions) > 0:
            self.axR.vlines(self.regions, self.axR.get_ylim()[0],
                            self.axR.get_ylim()[1], lw=2, color='k')
        
        return
    

    def reset(self, event):
        self.threshold_slider.reset()
        self.minf_slider.reset()
        self.rank_slider.reset()
        self.regions = []
        self.update_image(event)
        return
        
        
    def _sobel_on(self):
        print "Sobel filter: On"
        self.sobel_filter = True
        return
        
        
    def _sobel_off(self):
        print "Sobel filter: Off"
        self.sobel_filter = False
        return
        
        
    def _filter_on(self):
        print "Applying filters..."
        self.filter_on = True
        self.update_image()
        return

    
    def _filter_off(self):
        print "Removing filters... (if saved like this there will be no filter)"
        self.filter_on = False
        self.update_image()
        return
    

    def write_params(self, filename):
        """
        Write the parameters we have to disk.
        """
        
        # process the values into native python types
        if len(self.regions) == 0:
            radius_range = 'None'
        else:
            radius_range = [ float(x) for x in self.regions ]
            if len(radius_range) % 2 != 0:
                raise ValueError('Odd number of peak limits found on right panel!')
        
        param_dict = { 'threshold'       : float( np.power(10, self.threshold_slider.val) ),
                       'sobel'           : bool(self.sobel_filter),
                       'sigma'           : float(self.sigma_slider.val),
                       'minf_size'       : int(self.minf_slider.val),
                       'rank_size'       : int(self.rank_slider.val),
                       'radius_range'    : radius_range,
                       'dilation'        : float(self.dilation),
                       'center_shift'    : [ float(self.center[0]), float(self.center[1]) ],
                       'use_filter'      : bool(self.filter_on),
                       'params_to_optimize' : ['quad_offset_bydiag', 'quad_rotation'] }
        
        print "\nFinal Parameters:"
        pprint(param_dict)
        
        f = open(filename, 'w')
        f.write( yaml.dump( param_dict ) )
        f.close()
        
        print "\nWrote parameters to: %s\n" % filename
        
        return
    

def main():
    
    print_instructions()
    image, csp, output_fn = parse_n_load()
    
    intflt = InteractiveFilter(image, csp)
    intflt.show()
    intflt.write_params(output_fn)
    
    return
    
    
if __name__ == '__main__':
    main()


