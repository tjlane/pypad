#!/usr/bin/env python

# THIS FILE IS PART OF PyPad, AND IS GOVERENED BY A PERMISSIBILITY LICENSE 
# GOVERNING ITS USE AND DISTRIBUTION. YOU SHOULD HAVE RECIEVED A COPY OF THIS
# LICENSE WITH THE SOFTWARE; IF NOT PROVIDED, WRITE TO <tjlane@stanford.edu>.
#
# AUTHORS:
# TJ Lane <tjlane@stanford.edu>
# Jonas Sellberg <jonas.a.sellberg@gmail.com>
#
# Apr 30, 2013

"""
Convert a geometry file to AMI format.
"""

import os
from glob import glob
import argparse

from pypad import cspad

parser = argparse.ArgumentParser(description='''Convert a CSPad geometry into an AMI geometry and save it to the correct dir''')
parser.add_argument('experiment',
                    help='''The experiment identifier to save the geometry in, e.g. cxiXXXX''')
parser.add_argument('-g', '--geometry', default=None,
                    help='''A CSPAD Metrology, in {.txt, .cspad, .h5, .geom, .dtc} format.
                            If no geometry is provided here, will attempt to use the
                            `experiment`s psana geometry.''')
parser.add_argument('-d', '--dilation', type=float, default=0.0,
                    help='The CSPAD dilation to apply, in mm')
args = parser.parse_args()

expt_path = '/reg/d/psdm/%s/%s' % (args.experiment[:3], args.experiment)
cameras = glob('%s/calib/*::Calib*/*' % expt_path)

# this is if we've been provided a file
if args.geometry is not None:
    geom = cspad.CSPad.load(args.geometry)

    if len(cameras) == 1:
        camera = cameras[0]
        print 'Saving output to: %s' % camera
    elif len(cameras) > 1:
        print ''
        print 'Many cameras detected for this experiment...'
        print 'Select the one you want'
        for i, c in enumerate(cameras):
            print '(%d) %s' % (i, c)
        print ''
        index = int( raw_input('I want camera number: ')  )
        camera = cameras[index]
        print 'Selected: (%d) %s' % (i, camera)
    else:
        raise RuntimeError('No camera directories found in: %s' % expt_path)

    amigeom_dir = os.path.join(camera, 'amigeometry')
    if not os.path.exists(amigeom_dir):
        print 'Making: %s' % amigeom_dir
        os.mkdir(amigeom_dir)

    filename = os.path.join(amigeom_dir, 'geo.pypad.dat')
    geom.to_ami(filename)
    print 'Saved: %s' % filename


# this is if we're trying to read the psana geometry
else:
    raise NotImplementedError('Sorry, reading from psana is not currently supported.')

    for camera in cameras:

        # TJL : need to prompt for what detector to use here, or just do both
        expt_geom_path = os.path.join()
        print 'No geometry file specified.'
        print 'Attempting to load geometry from: %s' % camera



